# coding: utf-8

"""
    Layered Insight Scan

    Layered Insight Scan performs static vulnerability analysis, license and package compliance.  You can find out more about Scan at http://layeredinsight.com.

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TopCve(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cve': 'str',
        'score': 'float',
        'count': 'float',
        'image_count': 'int',
        'images': 'list[str]'
    }

    attribute_map = {
        'cve': 'CVE',
        'score': 'Score',
        'count': 'Count',
        'image_count': 'ImageCount',
        'images': 'Images'
    }

    def __init__(self, cve=None, score=None, count=None, image_count=None, images=None):
        """
        TopCve - a model defined in Swagger
        """

        self._cve = None
        self._score = None
        self._count = None
        self._image_count = None
        self._images = None

        if cve is not None:
          self.cve = cve
        if score is not None:
          self.score = score
        if count is not None:
          self.count = count
        if image_count is not None:
          self.image_count = image_count
        if images is not None:
          self.images = images

    @property
    def cve(self):
        """
        Gets the cve of this TopCve.
        CVE ID of this vulnerability

        :return: The cve of this TopCve.
        :rtype: str
        """
        return self._cve

    @cve.setter
    def cve(self, cve):
        """
        Sets the cve of this TopCve.
        CVE ID of this vulnerability

        :param cve: The cve of this TopCve.
        :type: str
        """

        self._cve = cve

    @property
    def score(self):
        """
        Gets the score of this TopCve.
        CVSS score of this vulnerability

        :return: The score of this TopCve.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this TopCve.
        CVSS score of this vulnerability

        :param score: The score of this TopCve.
        :type: float
        """

        self._score = score

    @property
    def count(self):
        """
        Gets the count of this TopCve.
        Number of occurrances of this vulnerability (across all image layers)

        :return: The count of this TopCve.
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this TopCve.
        Number of occurrances of this vulnerability (across all image layers)

        :param count: The count of this TopCve.
        :type: float
        """

        self._count = count

    @property
    def image_count(self):
        """
        Gets the image_count of this TopCve.
        Number of scanned images vulnerable to this issue

        :return: The image_count of this TopCve.
        :rtype: int
        """
        return self._image_count

    @image_count.setter
    def image_count(self, image_count):
        """
        Sets the image_count of this TopCve.
        Number of scanned images vulnerable to this issue

        :param image_count: The image_count of this TopCve.
        :type: int
        """

        self._image_count = image_count

    @property
    def images(self):
        """
        Gets the images of this TopCve.
        List of Layered Insight IDs to images with this vulnerability

        :return: The images of this TopCve.
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this TopCve.
        List of Layered Insight IDs to images with this vulnerability

        :param images: The images of this TopCve.
        :type: list[str]
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TopCve):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
