# coding: utf-8

"""
    Layered Insight Scan

    Layered Insight Scan performs static vulnerability analysis, license and package compliance.  You can find out more about Scan at http://layeredinsight.com.

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageLogs(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'page': 'int',
        'page_size': 'int',
        'prev_page_uri': 'str',
        'next_page_uri': 'str',
        'uri': 'str',
        'user_sid': 'str',
        'image_sid': 'str',
        'logs': 'list[ImageLog]'
    }

    attribute_map = {
        'page': 'Page',
        'page_size': 'PageSize',
        'prev_page_uri': 'PrevPageUri',
        'next_page_uri': 'NextPageUri',
        'uri': 'Uri',
        'user_sid': 'UserSid',
        'image_sid': 'ImageSid',
        'logs': 'Logs'
    }

    def __init__(self, page=None, page_size=None, prev_page_uri=None, next_page_uri=None, uri=None, user_sid=None, image_sid=None, logs=None):
        """
        ImageLogs - a model defined in Swagger
        """

        self._page = None
        self._page_size = None
        self._prev_page_uri = None
        self._next_page_uri = None
        self._uri = None
        self._user_sid = None
        self._image_sid = None
        self._logs = None

        if page is not None:
          self.page = page
        if page_size is not None:
          self.page_size = page_size
        if prev_page_uri is not None:
          self.prev_page_uri = prev_page_uri
        if next_page_uri is not None:
          self.next_page_uri = next_page_uri
        if uri is not None:
          self.uri = uri
        if user_sid is not None:
          self.user_sid = user_sid
        if image_sid is not None:
          self.image_sid = image_sid
        if logs is not None:
          self.logs = logs

    @property
    def page(self):
        """
        Gets the page of this ImageLogs.

        :return: The page of this ImageLogs.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """
        Sets the page of this ImageLogs.

        :param page: The page of this ImageLogs.
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """
        Gets the page_size of this ImageLogs.

        :return: The page_size of this ImageLogs.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """
        Sets the page_size of this ImageLogs.

        :param page_size: The page_size of this ImageLogs.
        :type: int
        """

        self._page_size = page_size

    @property
    def prev_page_uri(self):
        """
        Gets the prev_page_uri of this ImageLogs.

        :return: The prev_page_uri of this ImageLogs.
        :rtype: str
        """
        return self._prev_page_uri

    @prev_page_uri.setter
    def prev_page_uri(self, prev_page_uri):
        """
        Sets the prev_page_uri of this ImageLogs.

        :param prev_page_uri: The prev_page_uri of this ImageLogs.
        :type: str
        """

        self._prev_page_uri = prev_page_uri

    @property
    def next_page_uri(self):
        """
        Gets the next_page_uri of this ImageLogs.

        :return: The next_page_uri of this ImageLogs.
        :rtype: str
        """
        return self._next_page_uri

    @next_page_uri.setter
    def next_page_uri(self, next_page_uri):
        """
        Sets the next_page_uri of this ImageLogs.

        :param next_page_uri: The next_page_uri of this ImageLogs.
        :type: str
        """

        self._next_page_uri = next_page_uri

    @property
    def uri(self):
        """
        Gets the uri of this ImageLogs.

        :return: The uri of this ImageLogs.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this ImageLogs.

        :param uri: The uri of this ImageLogs.
        :type: str
        """

        self._uri = uri

    @property
    def user_sid(self):
        """
        Gets the user_sid of this ImageLogs.

        :return: The user_sid of this ImageLogs.
        :rtype: str
        """
        return self._user_sid

    @user_sid.setter
    def user_sid(self, user_sid):
        """
        Sets the user_sid of this ImageLogs.

        :param user_sid: The user_sid of this ImageLogs.
        :type: str
        """

        self._user_sid = user_sid

    @property
    def image_sid(self):
        """
        Gets the image_sid of this ImageLogs.

        :return: The image_sid of this ImageLogs.
        :rtype: str
        """
        return self._image_sid

    @image_sid.setter
    def image_sid(self, image_sid):
        """
        Sets the image_sid of this ImageLogs.

        :param image_sid: The image_sid of this ImageLogs.
        :type: str
        """

        self._image_sid = image_sid

    @property
    def logs(self):
        """
        Gets the logs of this ImageLogs.

        :return: The logs of this ImageLogs.
        :rtype: list[ImageLog]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this ImageLogs.

        :param logs: The logs of this ImageLogs.
        :type: list[ImageLog]
        """

        self._logs = logs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageLogs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
