# coding: utf-8

"""
    Layered Insight Scan

    Layered Insight Scan performs static vulnerability analysis, license and package compliance.  You can find out more about Scan at http://layeredinsight.com.

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CveSearch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'str',
        'images': 'list[CveSearchImage]'
    }

    attribute_map = {
        'uri': 'Uri',
        'images': 'Images'
    }

    def __init__(self, uri=None, images=None):
        """
        CveSearch - a model defined in Swagger
        """

        self._uri = None
        self._images = None

        if uri is not None:
          self.uri = uri
        if images is not None:
          self.images = images

    @property
    def uri(self):
        """
        Gets the uri of this CveSearch.

        :return: The uri of this CveSearch.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this CveSearch.

        :param uri: The uri of this CveSearch.
        :type: str
        """

        self._uri = uri

    @property
    def images(self):
        """
        Gets the images of this CveSearch.

        :return: The images of this CveSearch.
        :rtype: list[CveSearchImage]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this CveSearch.

        :param images: The images of this CveSearch.
        :type: list[CveSearchImage]
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CveSearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
