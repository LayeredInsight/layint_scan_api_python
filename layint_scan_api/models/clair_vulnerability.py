# coding: utf-8

"""
    Layered Insight Scan

    Layered Insight Scan performs static vulnerability analysis, license and package compliance.  You can find out more about Scan at http://layeredinsight.com.

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClairVulnerability(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'namespace_name': 'str',
        'description': 'str',
        'link': 'str',
        'severity': 'str',
        'fixed_by': 'str',
        'fixed_in': 'str',
        'metadata': 'list[str]'
    }

    attribute_map = {
        'name': 'Name',
        'namespace_name': 'NamespaceName',
        'description': 'Description',
        'link': 'Link',
        'severity': 'Severity',
        'fixed_by': 'FixedBy',
        'fixed_in': 'FixedIn',
        'metadata': 'Metadata'
    }

    def __init__(self, name=None, namespace_name=None, description=None, link=None, severity=None, fixed_by=None, fixed_in=None, metadata=None):
        """
        ClairVulnerability - a model defined in Swagger
        """

        self._name = None
        self._namespace_name = None
        self._description = None
        self._link = None
        self._severity = None
        self._fixed_by = None
        self._fixed_in = None
        self._metadata = None

        if name is not None:
          self.name = name
        if namespace_name is not None:
          self.namespace_name = namespace_name
        if description is not None:
          self.description = description
        if link is not None:
          self.link = link
        if severity is not None:
          self.severity = severity
        if fixed_by is not None:
          self.fixed_by = fixed_by
        if fixed_in is not None:
          self.fixed_in = fixed_in
        if metadata is not None:
          self.metadata = metadata

    @property
    def name(self):
        """
        Gets the name of this ClairVulnerability.
        Name of vulnerability

        :return: The name of this ClairVulnerability.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClairVulnerability.
        Name of vulnerability

        :param name: The name of this ClairVulnerability.
        :type: str
        """

        self._name = name

    @property
    def namespace_name(self):
        """
        Gets the namespace_name of this ClairVulnerability.
        Name of namespace where this vulnerability was seen

        :return: The namespace_name of this ClairVulnerability.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """
        Sets the namespace_name of this ClairVulnerability.
        Name of namespace where this vulnerability was seen

        :param namespace_name: The namespace_name of this ClairVulnerability.
        :type: str
        """

        self._namespace_name = namespace_name

    @property
    def description(self):
        """
        Gets the description of this ClairVulnerability.
        Description of vulnerability

        :return: The description of this ClairVulnerability.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ClairVulnerability.
        Description of vulnerability

        :param description: The description of this ClairVulnerability.
        :type: str
        """

        self._description = description

    @property
    def link(self):
        """
        Gets the link of this ClairVulnerability.
        Link to vulnerability details

        :return: The link of this ClairVulnerability.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this ClairVulnerability.
        Link to vulnerability details

        :param link: The link of this ClairVulnerability.
        :type: str
        """

        self._link = link

    @property
    def severity(self):
        """
        Gets the severity of this ClairVulnerability.
        Severity of vulnerability

        :return: The severity of this ClairVulnerability.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this ClairVulnerability.
        Severity of vulnerability

        :param severity: The severity of this ClairVulnerability.
        :type: str
        """

        self._severity = severity

    @property
    def fixed_by(self):
        """
        Gets the fixed_by of this ClairVulnerability.
        May contain details about who fixed the vulnerability

        :return: The fixed_by of this ClairVulnerability.
        :rtype: str
        """
        return self._fixed_by

    @fixed_by.setter
    def fixed_by(self, fixed_by):
        """
        Sets the fixed_by of this ClairVulnerability.
        May contain details about who fixed the vulnerability

        :param fixed_by: The fixed_by of this ClairVulnerability.
        :type: str
        """

        self._fixed_by = fixed_by

    @property
    def fixed_in(self):
        """
        Gets the fixed_in of this ClairVulnerability.
        May contain details about what release this was fixed in

        :return: The fixed_in of this ClairVulnerability.
        :rtype: str
        """
        return self._fixed_in

    @fixed_in.setter
    def fixed_in(self, fixed_in):
        """
        Sets the fixed_in of this ClairVulnerability.
        May contain details about what release this was fixed in

        :param fixed_in: The fixed_in of this ClairVulnerability.
        :type: str
        """

        self._fixed_in = fixed_in

    @property
    def metadata(self):
        """
        Gets the metadata of this ClairVulnerability.
        Array of metadata related to this vulnerability, such as CVSS vectors.

        :return: The metadata of this ClairVulnerability.
        :rtype: list[str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """
        Sets the metadata of this ClairVulnerability.
        Array of metadata related to this vulnerability, such as CVSS vectors.

        :param metadata: The metadata of this ClairVulnerability.
        :type: list[str]
        """

        self._metadata = metadata

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClairVulnerability):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
