# coding: utf-8

"""
    Layered Insight Scan

    Layered Insight Scan performs static vulnerability analysis, license and package compliance.  You can find out more about Scan at http://layeredinsight.com.

    OpenAPI spec version: 0.9.4
    Contact: help@layeredinsight.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ClairLayer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'namespace_name': 'str',
        'path': 'str',
        'parent_name': 'str',
        'format': 'str',
        'indexed_by_version': 'str',
        'features': 'list[ClairFeature]'
    }

    attribute_map = {
        'name': 'Name',
        'namespace_name': 'NamespaceName',
        'path': 'Path',
        'parent_name': 'ParentName',
        'format': 'Format',
        'indexed_by_version': 'IndexedByVersion',
        'features': 'Features'
    }

    def __init__(self, name=None, namespace_name=None, path=None, parent_name=None, format=None, indexed_by_version=None, features=None):
        """
        ClairLayer - a model defined in Swagger
        """

        self._name = None
        self._namespace_name = None
        self._path = None
        self._parent_name = None
        self._format = None
        self._indexed_by_version = None
        self._features = None

        if name is not None:
          self.name = name
        if namespace_name is not None:
          self.namespace_name = namespace_name
        if path is not None:
          self.path = path
        if parent_name is not None:
          self.parent_name = parent_name
        if format is not None:
          self.format = format
        if indexed_by_version is not None:
          self.indexed_by_version = indexed_by_version
        if features is not None:
          self.features = features

    @property
    def name(self):
        """
        Gets the name of this ClairLayer.
        Machine name of layer

        :return: The name of this ClairLayer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClairLayer.
        Machine name of layer

        :param name: The name of this ClairLayer.
        :type: str
        """

        self._name = name

    @property
    def namespace_name(self):
        """
        Gets the namespace_name of this ClairLayer.
        Name of namespace of this layer

        :return: The namespace_name of this ClairLayer.
        :rtype: str
        """
        return self._namespace_name

    @namespace_name.setter
    def namespace_name(self, namespace_name):
        """
        Sets the namespace_name of this ClairLayer.
        Name of namespace of this layer

        :param namespace_name: The namespace_name of this ClairLayer.
        :type: str
        """

        self._namespace_name = namespace_name

    @property
    def path(self):
        """
        Gets the path of this ClairLayer.

        :return: The path of this ClairLayer.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this ClairLayer.

        :param path: The path of this ClairLayer.
        :type: str
        """

        self._path = path

    @property
    def parent_name(self):
        """
        Gets the parent_name of this ClairLayer.
        Parent of this layer - reference to container

        :return: The parent_name of this ClairLayer.
        :rtype: str
        """
        return self._parent_name

    @parent_name.setter
    def parent_name(self, parent_name):
        """
        Sets the parent_name of this ClairLayer.
        Parent of this layer - reference to container

        :param parent_name: The parent_name of this ClairLayer.
        :type: str
        """

        self._parent_name = parent_name

    @property
    def format(self):
        """
        Gets the format of this ClairLayer.

        :return: The format of this ClairLayer.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """
        Sets the format of this ClairLayer.

        :param format: The format of this ClairLayer.
        :type: str
        """

        self._format = format

    @property
    def indexed_by_version(self):
        """
        Gets the indexed_by_version of this ClairLayer.

        :return: The indexed_by_version of this ClairLayer.
        :rtype: str
        """
        return self._indexed_by_version

    @indexed_by_version.setter
    def indexed_by_version(self, indexed_by_version):
        """
        Sets the indexed_by_version of this ClairLayer.

        :param indexed_by_version: The indexed_by_version of this ClairLayer.
        :type: str
        """

        self._indexed_by_version = indexed_by_version

    @property
    def features(self):
        """
        Gets the features of this ClairLayer.

        :return: The features of this ClairLayer.
        :rtype: list[ClairFeature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """
        Sets the features of this ClairLayer.

        :param features: The features of this ClairLayer.
        :type: list[ClairFeature]
        """

        self._features = features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ClairLayer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
